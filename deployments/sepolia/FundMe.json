{
  "address": "0x88797bC88Cf2C5FDd44b00f422e271FCD247d2F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7faa88ffad99f9898c2ccad2bb92613c67d8deb9b53a98a80b3bf8613ceadf22",
  "receipt": {
    "to": null,
    "from": "0x07EFACfA68A7AA770D045A408394921d71CF974A",
    "contractAddress": "0x88797bC88Cf2C5FDd44b00f422e271FCD247d2F7",
    "transactionIndex": 24,
    "gasUsed": "829549",
    "logsBloom": "0x
    "blockHash": "0x54a4db8541855cf2579b48321a9162a4dca2993d5e5f0a62e51e7dcc6e22ad74",
    "transactionHash": "0x7faa88ffad99f9898c2ccad2bb92613c67d8deb9b53a98a80b3bf8613ceadf22",
    "logs": [],
    "blockNumber": 6638149,
    "cumulativeGasUsed": "5262264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "0661fdb22f0f418e5a10a4daf8c3782d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n//import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n\\n    //State Variables!\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n     modifier onlyOwner {\\n         //require(msg.sender == i_owner,\\\"FundMe__NotOwner\\\");\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    // function getVersion() public view returns (uint256){\\n    //     // ETH/USD price feed address of Sepolia Network.\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n    //     return priceFeed.version();\\n    // }\\n    \\n   \\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    \\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\",\"keccak256\":\"0x06852430f0f45b4ddf02616b89e2279eab73106f0de09ba2d622282958373e36\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n//import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        // Sepolia ETH / USD Address\\r\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n        // );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbe37a60f6dcf1768e2a2224d0f3104d06c770e1b6762bd9b97308a4a3bbb6ff8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e8d380380610e8d8339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610d34806101596000396000f3fe6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f4578063b60d42881461011f578063dba6335f14610129578063dc0d3dff1461015457610070565b80633ccfd60b146100755780633e47d6f31461008c5780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100b360048036038101906100ae919061078e565b6103cd565b6040516100c091906107d4565b60405180910390f35b3480156100d557600080fd5b506100de6103e5565b6040516100eb91906107d4565b60405180910390f35b34801561010057600080fd5b506101096103f2565b604051610116919061084e565b60405180910390f35b610127610418565b005b34801561013557600080fd5b5061013e610552565b60405161014b9190610878565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906108bf565b610578565b6040516101889190610878565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610218576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102bd5760006001828154811061023e5761023d6108ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061021b565b50600067ffffffffffffffff8111156102d9576102d861091b565b5b6040519080825280602002602001820160405280156103075781602001602082028036833780820191505090505b506001908051906020019061031d929190610684565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103449061097b565b60006040518083038185875af1925050503d8060008114610381576040519150601f19603f3d011682016040523d82523d6000602084013e610386565b606091505b50509050806103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906109ed565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b790919063ffffffff16565b1015610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90610a59565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104e69190610aa8565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061058857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c3836105f3565b90506000670de0b6b3a764000085836105dc9190610adc565b6105e69190610b4d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610c0b565b5050509150506402540be4008161067c9190610c86565b915050919050565b8280548282559060005260206000209081019282156106fd579160200282015b828111156106fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106a4565b5b50905061070a919061070e565b5090565b5b8082111561072757600081600090555060010161070f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061075b82610730565b9050919050565b61076b81610750565b811461077657600080fd5b50565b60008135905061078881610762565b92915050565b6000602082840312156107a4576107a361072b565b5b60006107b284828501610779565b91505092915050565b6000819050919050565b6107ce816107bb565b82525050565b60006020820190506107e960008301846107c5565b92915050565b6000819050919050565b600061081461080f61080a84610730565b6107ef565b610730565b9050919050565b6000610826826107f9565b9050919050565b60006108388261081b565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b61087281610750565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c816107bb565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b6000602082840312156108d5576108d461072b565b5b60006108e3848285016108aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b600061096560008361094a565b915061097082610955565b600082019050919050565b600061098682610958565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b60006109d7600b83610990565b91506109e2826109a1565b602082019050919050565b60006020820190508181036000830152610a06816109ca565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a43601b83610990565b9150610a4e82610a0d565b602082019050919050565b60006020820190508181036000830152610a7281610a36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab3826107bb565b9150610abe836107bb565b9250828201905080821115610ad657610ad5610a79565b5b92915050565b6000610ae7826107bb565b9150610af2836107bb565b9250828202610b00816107bb565b91508282048414831517610b1757610b16610a79565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b58826107bb565b9150610b63836107bb565b925082610b7357610b72610b1e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b9d81610b7e565b8114610ba857600080fd5b50565b600081519050610bba81610b94565b92915050565b6000819050919050565b610bd381610bc0565b8114610bde57600080fd5b50565b600081519050610bf081610bca565b92915050565b600081519050610c0581610893565b92915050565b600080600080600060a08688031215610c2757610c2661072b565b5b6000610c3588828901610bab565b9550506020610c4688828901610be1565b9450506040610c5788828901610bf6565b9350506060610c6888828901610bf6565b9250506080610c7988828901610bab565b9150509295509295909350565b6000610c9182610bc0565b9150610c9c83610bc0565b9250828202610caa81610bc0565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ce257610ce1610a79565b5b8282058414831517610cf757610cf6610a79565b5b509291505056fea264697066735822122060c4f4e2ed78e4cbfa802ed6cadeb5d6530cb8d7a164bbd674e2155d7debe00964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f4578063b60d42881461011f578063dba6335f14610129578063dc0d3dff1461015457610070565b80633ccfd60b146100755780633e47d6f31461008c5780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100b360048036038101906100ae919061078e565b6103cd565b6040516100c091906107d4565b60405180910390f35b3480156100d557600080fd5b506100de6103e5565b6040516100eb91906107d4565b60405180910390f35b34801561010057600080fd5b506101096103f2565b604051610116919061084e565b60405180910390f35b610127610418565b005b34801561013557600080fd5b5061013e610552565b60405161014b9190610878565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906108bf565b610578565b6040516101889190610878565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610218576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102bd5760006001828154811061023e5761023d6108ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061021b565b50600067ffffffffffffffff8111156102d9576102d861091b565b5b6040519080825280602002602001820160405280156103075781602001602082028036833780820191505090505b506001908051906020019061031d929190610684565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103449061097b565b60006040518083038185875af1925050503d8060008114610381576040519150601f19603f3d011682016040523d82523d6000602084013e610386565b606091505b50509050806103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906109ed565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b790919063ffffffff16565b1015610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90610a59565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104e69190610aa8565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061058857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c3836105f3565b90506000670de0b6b3a764000085836105dc9190610adc565b6105e69190610b4d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610c0b565b5050509150506402540be4008161067c9190610c86565b915050919050565b8280548282559060005260206000209081019282156106fd579160200282015b828111156106fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106a4565b5b50905061070a919061070e565b5090565b5b8082111561072757600081600090555060010161070f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061075b82610730565b9050919050565b61076b81610750565b811461077657600080fd5b50565b60008135905061078881610762565b92915050565b6000602082840312156107a4576107a361072b565b5b60006107b284828501610779565b91505092915050565b6000819050919050565b6107ce816107bb565b82525050565b60006020820190506107e960008301846107c5565b92915050565b6000819050919050565b600061081461080f61080a84610730565b6107ef565b610730565b9050919050565b6000610826826107f9565b9050919050565b60006108388261081b565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b61087281610750565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c816107bb565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b6000602082840312156108d5576108d461072b565b5b60006108e3848285016108aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b600061096560008361094a565b915061097082610955565b600082019050919050565b600061098682610958565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b60006109d7600b83610990565b91506109e2826109a1565b602082019050919050565b60006020820190508181036000830152610a06816109ca565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a43601b83610990565b9150610a4e82610a0d565b602082019050919050565b60006020820190508181036000830152610a7281610a36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ab3826107bb565b9150610abe836107bb565b9250828201905080821115610ad657610ad5610a79565b5b92915050565b6000610ae7826107bb565b9150610af2836107bb565b9250828202610b00816107bb565b91508282048414831517610b1757610b16610a79565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b58826107bb565b9150610b63836107bb565b925082610b7357610b72610b1e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b9d81610b7e565b8114610ba857600080fd5b50565b600081519050610bba81610b94565b92915050565b6000819050919050565b610bd381610bc0565b8114610bde57600080fd5b50565b600081519050610bf081610bca565b92915050565b600081519050610c0581610893565b92915050565b600080600080600060a08688031215610c2757610c2661072b565b5b6000610c3588828901610bab565b9550506020610c4688828901610be1565b9450506040610c5788828901610bf6565b9350506060610c6888828901610bf6565b9250506080610c7988828901610bab565b9150509295509295909350565b6000610c9182610bc0565b9150610c9c83610bc0565b9250828202610caa81610bc0565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ce257610ce1610a79565b5b8282058414831517610cf757610cf6610a79565b5b509291505056fea264697066735822122060c4f4e2ed78e4cbfa802ed6cadeb5d6530cb8d7a164bbd674e2155d7debe00964736f6c63430008180033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 324,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 327,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}